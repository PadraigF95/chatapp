{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messageRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAaKA,IAASC,KAAKC,QACjBF,IAASG,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMnB,IAAMC,EAAOX,IAASW,OAChBC,EAAYZ,IAASY,YAoB3B,SAASC,IAOP,OACE,mCACA,wBAAQC,QAPe,WACvB,IAAMC,EAAW,IAAIf,IAASW,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAKrB,mCAKJ,SAASG,IACP,OAAOP,EAAKQ,aACV,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,sBAIJ,SAASC,IAEP,IAAMC,EAAQC,mBAERC,EAAaZ,EAAUa,WAAW,YAClCC,EAAQF,EAAWG,QAAQ,aAAaC,MAAM,IALlC,EAOAC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAPY,sBASiBC,mBAAS,IAT1B,mBASXC,EATW,KASAC,EATA,KAWZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAElBD,EAAEE,iBAFgB,EAIQ3B,EAAKQ,YAAvBoB,EAJU,EAIVA,IAAKC,EAJK,EAILA,SAJK,SAMZhB,EAAWiB,IAAI,CACjBC,KAAMT,EACNU,UAAW3C,IAASY,UAAUgC,WAAWC,kBACzCN,MACAC,aAVc,OAalBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAfvB,2CAAH,sDAkBjB,OACE,qCACA,iCACGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA2BC,QAASF,GAAlBA,EAAIG,OAEvD,qBAAKC,IAAKhC,OAGZ,uBAAMiC,SAAUpB,EAAhB,UAEE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QAAQG,YAAY,SAEpF,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,0BAQN,SAASkB,EAAYW,GAAO,IAAD,EAEOA,EAAMV,QAA9BV,EAFiB,EAEjBA,KAAMH,EAFW,EAEXA,IAAKC,EAFM,EAENA,SAEbuB,EAAexB,IAAQ5B,EAAKQ,YAAYoB,IAAM,OAAS,WAE7D,OAAQ,mCACN,sBAAKyB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKzB,IACV,4BAAIE,SAKKwB,MArGf,WAAgB,IAAD,EAEEC,YAAaxD,GAArByD,EAFM,oBAGb,OACE,sBAAKJ,UAAU,MAAf,UACE,iCAEA,cAAC9C,EAAD,MAGA,kCACGkD,EAAO,cAAC/C,EAAD,IAAe,cAACR,EAAD,UC7BhBwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a408107d.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react'\n\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyAwxqlL-EKfQ5MeGyvCK_ZecPKIVaPDECA\",\n    authDomain: \"chat-app-22e7d.firebaseapp.com\",\n    projectId: \"chat-app-22e7d\",\n    storageBucket: \"chat-app-22e7d.appspot.com\",\n    messagingSenderId: \"952357420345\",\n    appId: \"1:952357420345:web:977bc940069a2033ce3ce8\",\n    measurementId: \"G-7JEJ46RDWP\"\n  });\n}\n\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n\n      <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n      \n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return(\n    <>\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n    </>\n  )\n}\n\nfunction SignOut() {\n  return auth.currentUser &&(\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom() {\n\n  const dummy = useRef();\n\n  const messageRef = firestore.collection('messages');\n  const query = messageRef.orderBy('createdAt').limit(25);\n\n  const[messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue ] = useState('');\n\n  const sendMessage = async (e) => {\n\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messageRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n    })\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth'});\n  }\n\n  return(\n    <>\n    <main>\n      {messages && messages.map(msg => <ChatMessage key={msg.id}  message={msg}/>)}\n\n      <div ref={dummy}></div>\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"chat\"/>\n\n      <button type=\"submit\" disabled={!formValue}>submit</button>\n\n    </form>\n\n    </>\n  )\n}\n\nfunction ChatMessage(props){\n\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}